generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  password      String? // Adicionado para login com credenciais
  emailVerified DateTime? // Para controle de verificação de e-mail
  image         String? // Para fotos de perfil (Google Provider)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  projects      Project[] // Relação com projetos
  comment       Comment[] // Relação com comentários
  tasks         Task[] // Relação com tarefas
  account       Account[]
  session       Session[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

enum ProjectType {
  WEB
  MOBILE
  SISTEMA
}

enum ProjectStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

model Project {
  id               String        @id @default(uuid())
  name             String
  description      String?
  type             ProjectType // Tipo do projeto (WEB, MOBILE, SISTEMA)
  status           ProjectStatus // Status do projeto (pending, in_progress, completed)
  userId           String
  user             User          @relation(fields: [userId], references: [id])
  price            Decimal       @db.Decimal(10, 2)
  deadlineDate     DateTime? // Data limite do projeto
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  tasks            Task[] // Relação com tarefas
  comments         Comment[] // Relação com comentários
  clientId         String? // ID do cliente associado ao projeto
  client           Client?       @relation(fields: [clientId], references: [id])
  contractUrl      String?
  contractFileName String?
}

enum ClientStatus {
  ACTIVE
  INACTIVE
}

model Client {
  id        String       @id @default(uuid())
  name      String
  email     String?      @unique
  phone     String?      @unique
  projects  Project[] // Relação com projetos
  userId    String?
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  status    ClientStatus @default(ACTIVE)
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

model Task {
  id          String     @id @default(uuid())
  title       String
  description String?
  status      TaskStatus // Status da tarefa (pending, in_progress, completed)
  projectId   String
  project     Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  user        User?      @relation(fields: [userId], references: [id])
  userId      String?
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
